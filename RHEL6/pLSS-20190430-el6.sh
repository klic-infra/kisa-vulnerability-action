#!/bin/bash
#20190401 platanus@canxan.com 

VER="20190430"
CLIENT="based on KISA 2017.12"
WORKLEVEL="1"
WORKLEVEL_TXT="after os clean install"

echo "Start.. $VER $CLIENT for RHEL/CentOS 6"
unameOut=`uname -r |grep '2.6.'`
if [ -z $unameOut ]; then echo ">> Not EL6 system" ; exit 1 ; fi

echo "check root .."
if [[ $(id -u) -ne 0 ]] ; then echo ">> Please run as root.." ; exit 1 ; fi

echo "input args: $1 $2 $3 $4 $5 $6"
echo "work level: $WORKLEVEL_TXT"
echo " "
echo " #### Operation Alert ##################"
echo " 1. Do not use std out."
echo " 2. Do not run backgound."
echo " 3. Can not revert state after processing"
echo " 4. Reboot after processing."
echo " 5. Keep more two sessions per server."
echo " 6. This process is non-idempotent."
echo " #######################################"
echo " "
read -p 'Really run? SYSTEM CANNOT GO BACK STATE AFTER WORK! [yes/no]: ' cautionvar
if [ $cautionvar != "yes" ] ; then echo ">> User execption exit."; exit 1; fi
echo " "
sleep 1

 
echo "Backup config files .."

if [ -d "/root/security_modify" ]; then
  echo ">> Security directory is exist."
  echo ">> Work already done. (avoid duplicate work)"
  echo ">> If you want to work, remove ~/security_modify directory."
  echo " "
  echo "exit."
  exit 1
else
  rm -rf ~/security_modify
  mkdir ~/security_modify/
  cp /etc/pam.d/login ~/security_modify/pam.d.login.bak 
  cp /etc/ssh/sshd_config ~/security_modify/sshd_config.bak
  cp /etc/securetty ~/security_modify/securetty
  cp /etc/pam.d/system-auth ~/security_modify/system-auth.bak
  cp /etc/login.defs ~/security_modify/login.defs.bak
  cp /etc/profile ~/security_modify/proflie.bak
  cp /etc/issue.net ~/security_modify/issue.net.bak
  cp /etc/sudoers ~/security_modify/sudoers.bak
  echo ">> Backup file which '~/security_modify' .."
fi


echo "Basic setup .."

## SELinux disable
if [[ $(getenforce) = *Disabled* ]]; then
  echo ">> SELinux setup ok"
else
  #sed -i 's/\(.*SELINUX=enforcing.*\)/SELINUX=disabled/' /etc/selinux/config
  sed -i '/SELINUX=/ s/enforcing/disabled/'  /etc/selinux/config
  setenforce 0
  echo ">> SELinux setting.. "
fi

## iptables disable
service iptables stop  > /dev/null 2>&1
chkconfig iptables off  > /dev/null 2>&1
service ip6tables stop  > /dev/null 2>&1
chkconfig ip6tables off  > /dev/null 2>&1
echo ">> iptables daemon disable setting.. "

service libvirt-guests stop > /dev/null 2>&1
chkconfig libvirt-guests off > /dev/null 2>&1


# echo "# NTP client setup"
# rm -rf /etc/ntp.conf
# cat <<"EOF">> /etc/ntp.conf
# server 192.168.10.51 iburst
# server 192.168.10.52 iburst 
# EOF
# service ntpd restart
# chkconfig ntpd on
# #ntpq -p


#addon######################################

echo ">> NS customize pre-processing .. "
echo "# useradd"
useradd -G wheel nsadmin
echo 'Thrkfl1101!' | passwd --stdin nsadmin
chage -d "0 days" nsadmin
chage -M 90 nsadmin
chage -m 1 nsadmin

echo "# group add"
groupadd -g 750 saadm
groupadd -g 550 dbadm
groupadd -g 650 mwadm
groupadd -g 660 appadm
groupadd -g 950 devadm
groupadd -g 700 dba
groupadd -g 800 app

echo "# NTP client setup"
rm -rf /etc/ntp.conf
cat <<"EOF">> /etc/ntp.conf
server 192.168.10.51 iburst
server 192.168.10.52 iburst 
EOF
service ntpd restart
chkconfig ntpd on
timedatectl set-ntp 1
ntpq -p


############################################  
sleep 2

echo "Security processing .."
echo "#1.1 root 계정 원격 접속 제한"
sed -i 's/\(.*PermitRootLogin [y,Y]es.*\)/PermitRootLogin no/' /etc/ssh/sshd_config
service sshd restart

echo "#1.2 패스워드 복잡성 설정"
if [[ $(cat /etc/pam.d/system-auth | grep pam_cracklib.so | grep minlen=8) -eq 0 ]]; then
sed -i '/pam_cracklib.so/d' /etc/pam.d/system-auth
sed -i '17 i\password    requisite     pam_cracklib.so try_first_pass retry=3 minlen=8 ocredit=-1 lcredit=-1 ucredit=-1 dcredit=-1' /etc/pam.d/system-auth
fi

echo "#1.3 계정 잠금 임계값 설정"
# if [[ $(cat /etc/pam.d/system-auth | grep pam_tally.so) -eq 0 ]]; then
# sed -i '8 i\auth        required      pam_tally.so deny=5 unlock_time=120 no_magic_root' /etc/pam.d/system-auth
# sed -i '10 i\account     required      pam_tally.so no_magic_root reset' /etc/pam.d/system-auth
# fi
if [[ $(cat /etc/pam.d/system-auth | grep pam_tally2.so) -eq 0 ]]; then
sed -i '5 i\auth        required      pam_tally2.so deny=5 unlock_time=300 ' /etc/pam.d/system-auth
sed -i '12 i\account     required      pam_tally2.so  ' /etc/pam.d/system-auth
fi

if [[ $(cat /etc/pam.d/password-auth | grep pam_tally2.so) -eq 0 ]]; then
sed -i '5 i\auth        required      pam_tally2.so deny=5 unlock_time=300' /etc/pam.d/password-auth
fi

echo "#1.4 패스워드 파일 보호 >> pass " 
echo "#1.5 root 이외의 UID가 0 금지 >> pass "

echo "#1.6 root 계정 su 제한"
if cat /etc/pam.d/su | egrep '#auth' | egrep 'required' | egrep 'pam_wheel.so'; then
sed -i '6 i\auth           required        pam_wheel.so use_uid' /etc/pam.d/su
fi
usermod -G wheel root
chgrp wheel /bin/su  
chmod 4750 /bin/su


echo "#1.7 패스워드 최소 길이 설정 >> pass "

echo "#1.8 패스워드 최대 사용 기간 설정"
#new account
sed -i '/PASS_MAX_DAYS/ s/99999/90/' /etc/login.defs
#exist account
chage -d "0 days" root
chage -M 90 root
chage -m 1 root

echo "#1.9 패스워드 최소 사용기간 설정"
sed -i '/PASS_MIN_DAYS/ s/0/1/' /etc/login.defs
chage -d "0 days" root
chage -M 90 root

echo "#1.10 불필요한 계정 제거"
userdel -f  adm > /dev/null 2>&1
userdel -f  lp > /dev/null 2>&1
userdel -f  sync > /dev/null 2>&1
userdel -f  shutdown > /dev/null 2>&1
userdel -f  halt > /dev/null 2>&1
userdel -f  news > /dev/null 2>&1
userdel -f  uucp > /dev/null 2>&1
userdel -f  operator > /dev/null 2>&1
userdel -f  games > /dev/null 2>&1
userdel -f  gopher > /dev/null 2>&1
userdel -f  nfsnobody > /dev/null 2>&1
userdel -f  squid > /dev/null 2>&1


echo "#1.11 관리자 그룹에 최소한의 계정 포함 >> pass"
echo "#1.12 계정이 존재하지 않는 GID 금지 >> pass"
echo "#1.13 동일한 UID 금지 >> pass"

echo "#1.14 사용자 shell 점검"
cat /etc/passwd | egrep "^daemon|^bin|^sys|^adm|^listen|^nobody|^nobody4|^noaccess|^diag|^listen|^operator|^games|^gopher" | grep -v "admin"

sleep 5


echo "#1.15 Session Timeout 설정" 
echo "TIMEOUT=600" >> /etc/profile

echo "#2.1 root 홈, 패스 디렉터리 권한 및 패스 설정 >> pass"
echo "#2.2 파일 및 디렉터리 소유자 설정"
#find / -nouser -print 
#find / -nogroup -print
chown -R root:root /var/log/cups /etc/cups /var/cache/cups /var/spool/cups > /dev/null 2>&1

echo "#2.3 /etc/passwd 파일 소유자 및 권한 설정"
chmod 644 /etc/passwd > /dev/null 2>&1

echo "#2.4 /etc/shadow 파일 소유자 및 권한 설정"
chmod 400 /etc/shadow > /dev/null 2>&1

echo "#2.5 /etc/hosts 파일 소유자 및 권한 설정"
chmod 600 /etc/hosts > /dev/null 2>&1

echo "#2.6 /etc/(x)inetd.conf 파일 소유자 및 권한 설정"
chown -R root /etc/xinetd.d  > /dev/null 2>&1
chmod -R 600 /etc/xinetd.d  > /dev/null 2>&1

echo "#2.7 	/etc/syslog.conf 파일 소유자 및 권한 설정"
chmod 644 /etc/rsyslog.conf > /dev/null 2>&1

echo "#2.8 /etc/services 파일 소유자 및 권한 설정"
chmod 644 /etc/services > /dev/null 2>&1

echo "#2.9 SUID, SGID, Sticky bit 설정 파일 점검"
chmod -s /sbin/dump /usr/bin/lpq-lpd /usr/bin/newgrp /sbin/restore /usr/bin/lpr /usr/sbin/lpc /sbin/unix_chkpwd /usr/bin/lpr-lpd /usr/sbin/lpc-lpd /usr/bin/at /usr/bin/lprm /usr/sbin/traceroute /usr/bin/lpq /usr/bin/lprm-lpd	> /dev/null 2>&1

echo "#2.10 사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정"
chmod o-w /home/*/.profile /home/*/.bash_profile /home/*/.bashrc /home/*/.bash_history > /dev/null 2>&1
chmod o-w /root/.profile /root/.bash_profile /root/.bashrc /root/.bash_history > /dev/null 2>&1

echo "#2.11	world writable 파일 점검 >> PASS"
echo "#2.12 2.12.	/dev에 존재하지 않는 device 파일 점검"
find /dev -type f -exec ls -l {} \;
find /dev -type f -exec rm -rf {} \;

echo "#2.13 HOME/.rhosts, hosts.equiv 사용 금지"
rm -rf /home/*/.rhosts > /dev/null 2>&1
rm -rf /root/.rhosts > /dev/null 2>&1
rm -rf /etc/hosts.equiv > /dev/null 2>&1

echo "#2.14	접속 IP 및 포트 제한"
touch /etc/hosts.deny

echo "#2.15	hosts.lpd 파일 소유자 및 권한 설정"
chmod 600 /etc/hosts.lpd > /dev/null 2>&1

echo "#2.16	NIS 서비스 비활성화"
if [[ $(service status ypserv ) -eq 1 ]]; then
  service ypserv stop > /dev/null 2>&1
  chkconfig ypserv off > /dev/null 2>&1
fi  

echo "#2.17 UMASK 설정 관리"
sed -i 's/#umask 022/umask 022/' /etc/profile
cat /etc/profile | grep umask

echo "#2.18 홈 디렉토리 소유자 및 권한 설정 >> PASS"
echo "#2.19 홈 디렉토리로 지정한 디렉토리의 존재 관리 >> PASS"
echo "#2.20	숨겨진 파일 및 디렉토리 검색 및 제거 >> PASS"

echo "#3.1 Finger 서비스 비활성화"
if [[ $(ls -alL /etc/xinetd.d/* | egrep "echo finger") -eq 1 ]]; then
  echo ">> Finger service exist"
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/finger
fi

echo "#3.2 Anonymous FTP 비활성화"
userdel -f ftp  > /dev/null 2>&1

echo "#3.3 r service disable"
if [[ $(ls -alL /etc/xinetd.d/* | egrep "rsh|rlogin|rexec" | egrep -v "grep|klogin|kshell|kexec") -eq 1 ]]; then
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/rlogin 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/rsh 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/rexec 
fi

echo "#3.4 cron 파일 소유자 및 권한 설정"
chown root /etc/cron.allow  > /dev/null 2>&1
chmod 640 /etc/cron.allow > /dev/null 2>&1
chown root /etc/cron.deny > /dev/null 2>&1
chmod 640 /etc/cron.deny > /dev/null 2>&1 

echo "#3.5	DoS 공격에 취약한 서비스 비활성화"
if [[ $(ls -alL /etc/xinetd.d/* | egrep "echo|discard|daytime|chargen" | egrep -v "grep|klogin|kshell|kexec") -eq 1 ]]; then
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/echo 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/discard 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/daytime 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/chargen 
fi

echo "#3.6 NFS 서비스 비활성화"
service nfs stop  > /dev/null 2>&1
chkconfig nfs off > /dev/null 2>&1
service netfs stop  > /dev/null 2>&1
chkconfig netfs off > /dev/null 2>&1

echo "#3.7 NFS 접근통제 >> PASS"
echo "#3.8. automountd 제거 "
service autofs stop  > /dev/null 2>&1
chkconfig autofs off  > /dev/null 2>&1

echo "#3.9. RPC 서비스 확인 >> pass"
service rpcbind stop > /dev/null 2>&1
chkconfig rpcbind off  > /dev/null 2>&1

echo "#3.10. NIS, NIS+ 점검 >> pass "
echo "#3.11. tftp, talk 서비스 비활성화 "
if [[ $(ls -alL /etc/xinetd.d/* | egrep "tftp|talk|ntalk") -eq 1 ]]; then
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/tftp 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/talk 
  sed -i '/[d,D]isable/ s/[N,n]o/yes/g'  /etc/xinetd.d/ntalk 
  service xinetd restart
fi

echo "#3.12. Sendmail 버전 점검 "
service sendmail stop > /dev/null 2>&1
chkconfig sendmail off  > /dev/null 2>&1

echo "#3.13. 스팸 메일 릴레이 제한 >> pass "
echo "#3.14. 일반사용자의 Sendmail 실행 방지 >> pass "
echo "#3.15. DNS 보안 버전 패치 >> pass"
echo "#3.16. DNS ZoneTransfer 설정 >> pass"
echo "#3.17. Apache 디렉토리 리스팅 제거 >> pass"
echo "#3.18. Apache 웹 프로세스 권한 제한 >> pass"
echo "#3.19. Apache 상위 디렉토리 접근 금지 >> pass"
echo "#3.20. Apache 불필요한 파일 제거 >> pass"
echo "#3.21. Apache 링크 사용 금지 >> pass"
echo "#3.22. Apache 파일 업로드 및 다운로드 제한 >> pass"
echo "#3.23. Apache 웹 서비스 영역의 분리 >> pass"
echo "#3.24. ssh 원격접속 허용  >> pass"
echo "#3.25. ftp 서비스 확인 >> pass"
service vsftpd stop  > /dev/null 2>&1
chkconfig vsftpd off  > /dev/null 2>&1

echo "#3.26. ftp 계정 shell 제한 >> pass"
echo "#3.27. Ftpusers 파일 소유자 및 권한 설정 "
touch /etc/ftpusers
chown root /etc/ftpusers
chmod 640 /etc/ftpusers

echo "#3.28. Ftpusers 파일 설정 >> pass"
echo "#3.29. at 파일 소유자 및 권한 설정 "
chown root /etc/at.allow > /dev/null 2>&1
chmod 640 /etc/at.allow > /dev/null 2>&1
chown root /etc/at.deny > /dev/null 2>&1
chmod 640 /etc/at.deny > /dev/null 2>&1

echo "#3.30. SNMP 서비스 구동 점검 >> pass"
echo "#3.31. SNMP 서비스 커뮤니티스트링의 복잡성 설정 >> pass"
echo "#3.32. 로그온 시 경고 메시지 제공 "
rm -rf /etc/motd
cat << "EOF" >> /etc/motd
-----------------------------------------------------------------
/                    Authorized access only!                    /
/  Disconnect IMMEDIATELY if you are not an authorized user!!!  /
/          All actions Will be monitored and recorded           /
-----------------------------------------------------------------

EOF
cat /etc/motd

echo "#3.33. NFS 설정 파일 접근 권한 "
chown root /etc/exports
chmod 644 /etc/exports


echo "#3.34. expn, vrfy 명령어 제한  >> pass"
echo "#3.35. Apache 웹서비스 정보 숨김  >> pass"
echo "#4.1. 최신 보안패치 및 벤더 권고사항 적용  >> pass"
echo "#5.1. 로그의 정기적 검토 및 보고  >> pass"  

echo "done." 

if [[ $1 = "v" ]]; then

clear


echo "------------work verification.----------------"
getenforce
cat /etc/ssh/sshd_config | grep PermitRootLogin
cat /etc/pam.d/system-auth | grep pam_cracklib.so
cat /etc/pam.d/system-auth | grep pam_tally2.so
cat /etc/pam.d/su | egrep 'auth' | egrep 'required' | egrep 'pam_wheel.so'
cat /etc/login.defs | grep PASS_MAX_DAYS
cat /etc/login.defs | grep PASS_MIN_DAYS
cat /etc/passwd | egrep "^daemon|^bin|^sys|^adm|^listen|^nobody|^nobody4|^noaccess|^diag|^listen|^operator|^games|^gopher"



fi